// <auto-generated />
using System;
using ClientPortalAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClientPortalAPI.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250514073558_AddFieldOrder")]
    partial class AddFieldOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientPortalAPI.Entities.ActivityHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataSnapshot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerformedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PerformedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerformedById");

                    b.HasIndex("SubmissionId");

                    b.ToTable("ActivityHistories");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.BaseTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseTemplates");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.FormAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("FormTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateId");

                    b.HasIndex("ClientId", "FormTemplateId")
                        .IsUnique();

                    b.ToTable("FormAssignments");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.FormField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldOrder")
                        .HasColumnType("int");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FormTemplateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionsJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("FormFields");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.FormTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseTemplateId");

                    b.ToTable("FormTemplates");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmittedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubmittedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormAssignmentId");

                    b.HasIndex("SubmittedById");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.SubmissionFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionFiles");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.ActivityHistory", b =>
                {
                    b.HasOne("ClientPortalAPI.Entities.ApplicationUser", "PerformedBy")
                        .WithMany()
                        .HasForeignKey("PerformedById");

                    b.HasOne("ClientPortalAPI.Entities.Submission", "Submission")
                        .WithMany("ActivityHistories")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedBy");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.FormAssignment", b =>
                {
                    b.HasOne("ClientPortalAPI.Entities.Client", "Client")
                        .WithMany("Assignments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientPortalAPI.Entities.FormTemplate", "FormTemplate")
                        .WithMany("Assignments")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("FormTemplate");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.FormField", b =>
                {
                    b.HasOne("ClientPortalAPI.Entities.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientPortalAPI.Entities.FormTemplate", "FormTemplate")
                        .WithMany("Fields")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("FormTemplate");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.FormTemplate", b =>
                {
                    b.HasOne("ClientPortalAPI.Entities.BaseTemplate", "BaseTemplate")
                        .WithMany("Templates")
                        .HasForeignKey("BaseTemplateId");

                    b.Navigation("BaseTemplate");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.Submission", b =>
                {
                    b.HasOne("ClientPortalAPI.Entities.FormAssignment", "FormAssignment")
                        .WithMany("Submissions")
                        .HasForeignKey("FormAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientPortalAPI.Entities.ApplicationUser", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById");

                    b.Navigation("FormAssignment");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.SubmissionFile", b =>
                {
                    b.HasOne("ClientPortalAPI.Entities.Submission", "Submission")
                        .WithMany("Files")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.BaseTemplate", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.Client", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.FormAssignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.FormTemplate", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("ClientPortalAPI.Entities.Submission", b =>
                {
                    b.Navigation("ActivityHistories");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
