@model FormTemplateViewModel
@using ClientPortalUI.Helpers
@{
    ViewData["Title"] = "Edit Form Template";
}

<div class="container-fluid mt-4">
    <h2 class="mb-4">Edit Form Template</h2>

    <form asp-action="EditTemplate" method="post" id="formTemplateForm" class="needs-validation" novalidate>
        <input type="hidden" asp-for="TemplateId" />        <input type="hidden" asp-for="IsBaseTemplate" />

        <div class="row">
            <!-- Available Field Types Panel -->
            <div class="col-md-3">
                <div class="card sticky-panel">
                    <div class="card-header">
                        <h5 class="mb-0">Available Fields</h5>
                    </div>
                    <div class="card-body">
                        <div id="availableFields" class="field-types-list">
                            @foreach (var fieldType in ViewBag.FieldTypes)
                            {
                                <div class="field-type-item mb-2" data-field-type="@fieldType.Name">
                                    <div class="card">
                                        <div class="card-body py-2 px-3">
                                            <i class="bi @ViewHelpers.GetFieldTypeIcon(fieldType.Name)"></i>
                                            <span class="ms-2">@fieldType.Name</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="text-muted small mt-3">
                            <i class="bi bi-info-circle"></i> Drag fields to build your form
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form Building Area -->
            <div class="col-md-9">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label asp-for="Name" class="form-label required">Template Name</label>
                            <input asp-for="Name" class="form-control" required />
                            <div class="invalid-feedback">Please enter a template name</div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Description" class="form-label">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h4 class="mb-0">Form Fields</h4>
                    </div>
                    <div class="card-body">
                        <div id="formFields" class="form-fields-list form-building-area">
                            @for (int i = 0; i < Model.Fields.Count; i++)
                            {
                                <div class="field-item card mb-3" data-field-type="@Model.Fields[i].FieldTypeName">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-start mb-3">
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-grip-vertical handle me-2"></i>
                                                <i class="bi @ViewHelpers.GetFieldTypeIcon(Model.Fields[i].FieldTypeName) me-2"></i>
                                                <h6 class="mb-0">@Model.Fields[i].FieldTypeName Field</h6>
                                            </div>
                                            <button type="button" class="btn btn-sm btn-outline-danger remove-field">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="form-group mb-2">
                                                    <label class="form-label required">Field Label</label>
                                                    <input type="text" class="form-control" name="Fields[@i].Label" value="@Model.Fields[i].Label" required />
                                                    <div class="invalid-feedback">Please enter a field label</div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <input type="hidden" name="Fields[@i].FieldTypeName" value="@Model.Fields[i].FieldTypeName" />
                                                <input type="hidden" name="Fields[@i].Id" value="@Model.Fields[i].Id" />
                                                <input type="hidden" name="Fields[@i].FieldOrder" value="@i" />
                                                <div class="form-check mt-4">
                                                    <input type="checkbox" class="form-check-input" name="Fields[@i].IsRequired" value="true" @(Model.Fields[i].IsRequired ? "checked" : "") />
                                                    <label class="form-check-label">Required Field</label>
                                                </div>
                                            </div>
                                        </div>

                                        @if (Model.Fields[i].FieldTypeName == "Dropdown")
                                        {
                                            <div class="row mt-2">
                                                <div class="col-12">
                                                    <div class="form-group">
                                                        <label class="form-label required">Options (comma-separated)</label>
                                                        <input type="text" class="form-control" name="Fields[@i].Options" value="@Model.Fields[i].Options" required placeholder="Option1, Option2, Option3" />
                                                        <div class="invalid-feedback">Please enter options for the dropdown</div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        <div id="noFieldsMessage" class="alert alert-info @(Model.Fields.Any() ? "d-none" : "")" role="alert">
                            <i class="bi bi-info-circle-fill me-2"></i>
                            Drag fields from the left panel to start building your form
                        </div>
                    </div>
                </div>

                <div class="form-group mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-check-circle me-2"></i>Save Changes
                    </button>
                    <a asp-action="FormTemplates" asp-controller="Admin" class="btn btn-secondary">
                        <i class="bi bi-x-circle me-2"></i>Cancel
                    </a>
                </div>
            </div>
        </div>
    </form>
</div>

@section Styles {
    <style>
        .required:after {
            content: " *";
            color: red;
        }
        .sticky-panel {
            position: sticky;
            top: 20px;
            max-height: calc(100vh - 40px);
            overflow-y: auto;
        }
        .field-type-item {
            cursor: grab;
        }
        .field-type-item:active {
            cursor: grabbing;
        }
        .field-item {
            background-color: #f8f9fa;
            transition: all 0.3s ease;
        }
        .field-item:hover {
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .field-item .handle {
            cursor: grab;
        }
        .field-item .handle:active {
            cursor: grabbing;
        }
        .sortable-ghost {
            opacity: 0.5;
            background-color: #e9ecef;
        }
        .field-types-list {
            max-height: calc(100vh - 200px);
            overflow-y: auto;
        }
        .form-fields-list {
            min-height: 200px;
            padding: 1rem;
            border: 2px dashed #ddd;
            border-radius: 4px;
        }
        .form-fields-list.drag-over {
            background-color: rgba(0, 123, 255, 0.05);
            border-color: #007bff;
        }
        .sticky-panel {
            position: sticky;
            top: 20px;
            z-index: 1000;
        }
        .form-building-area {
            min-height: 200px;
            padding: 1rem;
            border: 2px dashed #ddd;
            border-radius: 4px;
        }
        .form-building-area.drag-over {
            background-color: rgba(0, 123, 255, 0.05);
            border-color: #007bff;
        }
        .field-item.dragging {
            opacity: 0.5;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize form validation
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });

            // Initialize drag and drop for available fields
            const availableFields = document.getElementById('availableFields');
            new Sortable(availableFields, {
                group: {
                    name: 'fields',
                    pull: 'clone',
                    put: false
                },
                sort: false,
                animation: 150,
                onClone: function(evt) {
                    evt.clone.classList.add('dragging');
                }
            });

            // Initialize drag and drop for form fields
            const formFields = document.getElementById('formFields');
            new Sortable(formFields, {
                group: {
                    name: 'fields',
                    put: true
                },
                animation: 150,
                handle: '.handle',
                ghostClass: 'sortable-ghost',
                onAdd: function(evt) {
                    const item = evt.item;
                    const fieldType = item.getAttribute('data-field-type');
                    const newIndex = evt.newIndex;
                    
                    // Replace the cloned item with a proper field item
                    const fieldItem = createFieldItem(fieldType, newIndex);
                    item.parentNode.replaceChild(fieldItem, item);
                    updateFieldIndexes();
                    updateNoFieldsMessage();
                },
                onUpdate: function() {
                    updateFieldIndexes();
                }
            });

            // Event delegation for remove buttons
            $(document).on('click', '.remove-field', function() {
                $(this).closest('.field-item').remove();
                updateFieldIndexes();
                updateNoFieldsMessage();
            });

            function createFieldItem(fieldType, index) {
                const div = document.createElement('div');
                div.className = 'field-item card mb-3';
                div.setAttribute('data-field-type', fieldType);
                
                div.innerHTML = `
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-grip-vertical handle me-2"></i>
                                <i class="bi ${getFieldTypeIcon(fieldType)} me-2"></i>
                                <h6 class="mb-0">${fieldType} Field</h6>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-danger remove-field">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-2">
                                    <label class="form-label required">Field Label</label>
                                    <input type="text" class="form-control" name="Fields[${index}].Label" required />
                                    <div class="invalid-feedback">Please enter a field label</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <input type="hidden" name="Fields[${index}].FieldTypeName" value="${fieldType}" />
                                <input type="hidden" name="Fields[${index}].Id" value="0" />
                                <input type="hidden" name="Fields[${index}].FieldOrder" value="${index}" />
                                <div class="form-check mt-4">
                                    <input type="checkbox" class="form-check-input" name="Fields[${index}].IsRequired" value="true" />
                                    <label class="form-check-label">Required Field</label>
                                </div>
                            </div>
                        </div>

                        ${fieldType === 'Dropdown' ? `
                            <div class="row mt-2">
                                <div class="col-12">
                                    <div class="form-group">
                                        <label class="form-label required">Options (comma-separated)</label>
                                        <input type="text" class="form-control" name="Fields[${index}].Options" required placeholder="Option1, Option2, Option3" />
                                        <div class="invalid-feedback">Please enter options for the dropdown</div>
                                    </div>
                                </div>
                            </div>
                        ` : ''}
                    </div>
                `;
                
                return div;
            }

            function updateFieldIndexes() {
                $('.field-item').each(function(index) {
                    // Update all input names and values that contain the index
                    $(this).find('input, select').each(function() {
                        const name = $(this).attr('name');
                        if (name) {
                            const newName = name.replace(/Fields\[\d+\]/, `Fields[${index}]`);
                            $(this).attr('name', newName);
                        }
                        if ($(this).attr('name') === `Fields[${index}].FieldOrder`) {
                            $(this).val(index);
                        }
                    });
                });
            }

            function updateNoFieldsMessage() {
                const hasFields = $('.field-item').length > 0;
                $('#noFieldsMessage').toggleClass('d-none', hasFields);
            }            function getFieldTypeIcon(fieldType) {
                switch(fieldType?.toLowerCase()) {
                    case 'text': return 'bi-text-left';
                    case 'number': return 'bi-123';
                    case 'email': return 'bi-envelope';
                    case 'date': return 'bi-calendar';
                    case 'checkbox': return 'bi-check-square';
                    case 'dropdown': return 'bi-list';
                    case 'textarea': return 'bi-textarea-t';
                    default: return 'bi-input-cursor-text';
                }
            }
        });

        // Initialize toasts
        const toastElList = document.querySelectorAll('.toast');
        const toastList = [...toastElList].map(toastEl => new bootstrap.Toast(toastEl, { autohide: true }));
        toastList.forEach(toast => toast.show());
    </script>
}
